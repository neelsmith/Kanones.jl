{
  "hash": "4611888ff29829e4d5e800d6646a5f0f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Build a parser and parse a Greek string\"\n---\n\n\n\n## Follow along\n\nTo replicate all the steps in this tutorial:\n\n- [install Julia](https://julialang.org/downloads/) if you haven't already done so\n- download or clone the [Kanones.jl repository](https://github.com/neelsmith/Kanones.jl)\n- start a Julia REPL\n\n\n## Building a parser\n\nYou can build a parser from delimited-text files organized in directories following Kanónes' conventions. This example uses [the `literarygreek-rules` data set](https://github.com/neelsmith/Kanones.jl/tree/main/datasets/literarygreek-rules), found in the `datasets` directory of the Kanónes github repository.\n\nIf you have a variable named `repo` with the root directory of the Kanónes repository, then the `literarygreek-rules` dataset is in this directory:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nsrcdir = joinpath(repo, \"datasets\", \"literarygreek-rules\") \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n\"/Users/neelsmith/Desktop/greek-work/Kanones.jl/datasets/literarygreek-rules\"\n```\n:::\n:::\n\n\nWe can create a `Kanones.FilesDataSet` from a list of one or more directories.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing Kanones\nkds = dataset([srcdir])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nKanones.FilesDataset([\"/Users/neelsmith/Desktop/greek-work/Kanones.jl/datasets/literarygreek-rules\"], PolytonicGreek.LiteraryGreekOrthography(\"'αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩϊϋόύώάέήίΰΐἀἁἂἃἄἅἆἇἈἉἊἋἌἍἎἏἐἑἒἓἔἕἘἙἚἛἜἝἠἡἢἣἤἥἦἧἨἩἪἫἬἭἮἯἰἱἲἳἴἵἶἷἸἹἺἻἼἽἾἿὀὁὂὃὄὅὈὉὊὋὌὍὐὑὒὓὔὕὖὗὙὛὝὟὠὡὢὣὤὥὦὧὨὩὪὫὬὭὮὯὰάὲέὴήὶίὸόὺύὼώᾀᾁᾂᾃᾄᾅᾆᾇᾈᾉᾊᾋᾌᾍᾎᾏᾐᾑᾒᾓᾔᾕᾖᾗᾘᾙᾚᾛᾜᾝᾞᾟᾠᾡᾢᾣᾤᾥᾦᾧᾨᾩᾪᾫᾬᾭᾮᾯᾲᾳᾴᾶᾷᾸᾹᾺΆᾼῂῃῄῆῇῈΈῊΉῌῒΐῖῗῘῙῚΊῢΰῤῥῦῧῪΎῬῲῳῴῶῷῸΌῺΏῼ \\t\\n(\\\".,;:)\", DataType[Orthography.LexicalToken, Orthography.PunctuationToken]))\n```\n:::\n:::\n\n\nWe can then build a parser from a `KanonesDataSet`.\n\n::: {.cell warnings='false' execution_count=4}\n``` {.julia .cell-code}\np = stringParser(kds)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: stem 50… PronounStem(pronoun.n71882k, lsj.n71882, \"τῇ\", GMPGender(2), GMPCase(3), GMPNumber(1), \"article\")\n[ Info: stem 100… VerbStem(verbstems.n70958, lsj.n70958, \"νομι\", \"izw\", false)\n[ Info: stem 150… VerbStem(verbstems.n62274b, lsj.n62274, \"λειψ\", \"pp2\", false)\n[ Info: stem 200… IrregularVerbStem(irregverb.irregverbn31130i3, lsj.n31130, \"ἦν\", GMPPerson(3), GMPNumber(1), GMPTense(2), GMPMood(1), GMPVoice(1), \"irregularfiniteverb\")\n[ Info: stem 250… IrregularParticipleStem(irreginf.irregptcpl31130i, lsj.n31130, \"ὄν\", GMPTense(1), GMPVoice(1), GMPGender(3), GMPCase(1), GMPNumber(1), \"irregularparticiple\")\n[ Info: stem 300… IrregularVerbStem(compounds.n99858, lsj.n99858, \"συν#εἴην\", GMPPerson(1), GMPNumber(1), GMPTense(1), GMPMood(3), GMPVoice(1), \"irregularfiniteverb\")\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nStringParser(Any[\"ἀγαθός|lsj.n260|forms.7010001110|adjstems.n260|adjinfl.os_h_on_pos1\", \"ἀγαθή|lsj.n260|forms.7010002110|adjstems.n260|adjinfl.os_h_on_pos2\", \"ἀγαθόν|lsj.n260|forms.7010003110|adjstems.n260|adjinfl.os_h_on_pos3\", \"ἀγαθοῦ|lsj.n260|forms.7010001210|adjstems.n260|adjinfl.os_h_on_pos4\", \"ἀγαθῆς|lsj.n260|forms.7010002210|adjstems.n260|adjinfl.os_h_on_pos5\", \"ἀγαθοῦ|lsj.n260|forms.7010003210|adjstems.n260|adjinfl.os_h_on_pos6\", \"ἀγαθῷ|lsj.n260|forms.7010001310|adjstems.n260|adjinfl.os_h_on_pos7\", \"ἀγαθῇ|lsj.n260|forms.7010002310|adjstems.n260|adjinfl.os_h_on_pos8\", \"ἀγαθῷ|lsj.n260|forms.7010003310|adjstems.n260|adjinfl.os_h_on_pos9\", \"ἀγαθόν|lsj.n260|forms.7010001410|adjstems.n260|adjinfl.os_h_on_pos10\"  …  \"συνείητε|lsj.n99858|forms.3231310000|compounds.n99858|irreginfl.irregular2\", \"συνείησαν|lsj.n99858|forms.3331310000|compounds.n99858|irreginfl.irregular2\", \"συνείεν|lsj.n99858|forms.3331310000|compounds.n99858|irreginfl.irregular2\", \"συνῶ|lsj.n99858|forms.3111210000|compounds.n99858|irreginfl.irregular2\", \"συνῇς|lsj.n99858|forms.3211210000|compounds.n99858|irreginfl.irregular2\", \"συνῇ|lsj.n99858|forms.3311210000|compounds.n99858|irreginfl.irregular2\", \"συνῶμεν|lsj.n99858|forms.3131210000|compounds.n99858|irreginfl.irregular2\", \"συνῆτε|lsj.n99858|forms.3231210000|compounds.n99858|irreginfl.irregular2\", \"συνῶσι|lsj.n99858|forms.3331210000|compounds.n99858|irreginfl.irregular2\", \"συνεῖναι|lsj.n99858|forms.4001010000|compounds.n99858|irreginfl.irregular3\"])\n```\n:::\n:::\n\n\n### Interactive parsing\n\nOnce you have a parser, you can parse strings with the `parsetoken` function. The result is a Vector of analyses.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ns = \"ἀνθρώπῳ\"\nparses = parsetoken(s, p)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n1-element Vector{CitableParserBuilder.Analysis}:\n CitableParserBuilder.Analysis(\"ἀνθρώπῳ\", lsj.n8909, forms.2010001300, nounstems.n8909, nouninfl.os_ou3)\n```\n:::\n:::\n\n\nExtract a `GreekMorphologicalForm` from each analysis, and apply the `label` function to each:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nparses .|> greekForm .|> label\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n1-element Vector{String}:\n \"noun: masculine dative singular\"\n```\n:::\n:::\n\n\nExtract URNs for the lexeme from each analysis with the `lexemeurn` function from the `CitableParserBuilder` package:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nusing CitableParserBuilder\nlexemelist = parses .|> lexemeurn\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n1-element Vector{LexemeUrn}:\n lsj.n8909\n```\n:::\n:::\n\n\nAfter downloading LSJ labels for lexemes in the `lsj` collection, label lexemes with LSJ labels included.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nlsj = lemmatadict()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: Downloading dictionary of lemmata for `lsj` dataset...\n[ Info: Downloading dictionary of lemmata for `lsjx` dataset...\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nDict{String, String} with 115129 entries:\n  \"n56765\"  => \"κερατοβάτης\"\n  \"n22244\"  => \"γλαυκία\"\n  \"n76006\"  => \"οὐριοστάτης\"\n  \"n45183\"  => \"εὐστομέω\"\n  \"n93387\"  => \"σαρμός\"\n  \"n37715\"  => \"ἐξυπτιάζω\"\n  \"n65860\"  => \"μελάνθεμον\"\n  \"n41185\"  => \"ἐπισφετερίζομαι\"\n  \"n42107\"  => \"ἔρα\"\n  \"n71625\"  => \"ξηροτριβέω\"\n  \"n96940\"  => \"στοιχηγορέω\"\n  \"n110409\" => \"φάσμα\"\n  \"n72657\"  => \"ὀϊστοβρόχιον\"\n  \"n30738\"  => \"ἕε\"\n  \"n24127\"  => \"δερκευνής\"\n  \"n50024\"  => \"ἱερογλυφιστί\"\n  \"n7529\"   => \"ἀναστέλλω\"\n  \"n40157\"  => \"ἐπιμέλησις\"\n  \"n41945\"  => \"ἑπτακαιδεκάμετρος\"\n  \"n6666\"   => \"ἀνακαλύπτω\"\n  \"n105259\" => \"τρίσπερμον\"\n  \"n37116\"  => \"ἐξελληνίζω\"\n  \"n4864\"   => \"ἀμαίευτος\"\n  \"n104511\" => \"τραγῳδιοποιός\"\n  \"n57456\"  => \"κινδυνεύω\"\n  ⋮         => ⋮\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nlemmalabel.(lexemelist, dict = lsj)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1-element Vector{String}:\n \"lsj.n8909@ἄνθρωπος\"\n```\n:::\n:::\n\n\n",
    "supporting": [
      "parser_files/figure-docx"
    ],
    "filters": []
  }
}