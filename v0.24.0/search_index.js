var documenterSearchIndex = {"docs":
[{"location":"generating/generating/#Implementation:-overview-of-generating-a-form","page":"Generating a form","title":"Implementation:  overview of generating a form","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"The generate function has multiple methods (see API for details).  We'll follow, from the top down, the process of generating a token for a given lexeme (identified by a LexemeUrn) and morphological form (identified by a FormUrn), using a given Kanones dataset.","category":"page"},{"location":"generating/generating/#Following-the-dispatch-trail","page":"Generating a form","title":"Following the dispatch trail","text":"","category":"section"},{"location":"generating/generating/#Find-stem-and-rule-pairs","page":"Generating a form","title":"Find stem and rule pairs","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"The generating algorithm first selects from the cross product of stems and rules in the dataset all stem/rule combinations matching the requested lexeme and form.  Stems are subtypes of the abstract KanonesStem; rules are subtypes of the abstract KanonesRule.","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"info: Matching requested forms\nKanones datasets store form information for regular formations in the rules tables of the data set. Irregular formations identify forms in the stems tables for irregulars.  Thus when the type of the rule is IrregularRule , generate tests whether the form of the stem matches the requested form; otherwise, it tests on the form of the rule.  This is straightforward since subtypes of both KanonesStem and of KanonesRule implement the formurn function.","category":"page"},{"location":"generating/generating/#Dispatch-to-appropriate-subtypes-of-stem-and-rule","page":"Generating a form","title":"Dispatch to appropriate subtypes of stem and rule","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"The next step is to invoke generate using the stem and rule pair as parameters. We have advanced the problem from the abstraction of a lexeme and form to the concrete problem of generating a token using a specific stem and specific rule.","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"This method of generate further dispatches based on the type of the stem and rule.  For regular formations, each of Kanones' analytical types (\"parts of speech\", (described elsewhere in this documentation)) has a method of generate to handle a corresponding pair of rule and stem types:","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"Analytical type Stem type Rule type\nGMFNoun NounStem NounRule\nGMFPronoun PronounStem PronounRule\nGMFAdjective AdjectiveStem AdjectiveRule\nGMFAdverb AdjectiveStem AdverbRule\nGMFFiniteVerb VerbStem FiniteVerbRule\nGMFInfinitive VerbStem InfinitiveRule\nGMFParticiple VerbStem ParticipleRule\nGMFVerbalAdjective VerbStem VerbalAdjectiveRule\nGMFUninflected UninflectedStem UninflectedRule","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"For irregular forms, generate dispatches to a single function for the IrregularRule type and any StemType.","category":"page"},{"location":"generating/generating/#Irregular-forms","page":"Generating a form","title":"Irregular forms","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"danger: Add note here\nNeed to add a note on how irregular forms are returned.","category":"page"},{"location":"generating/generating/#Regular-forms:-concatenating-stem-and-inflection","page":"Generating a form","title":"Regular forms: concatenating stem and inflection","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"Conceptually, we want combine the string data included in stems and rules, and found with the stemstring and ending functions.  Essentially, regular forms can now be found by concatenating them:","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"stemstring(stem) * ending(rule)","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"However, there are numerous specific details that need to be considered, such as phonological changes required by Greek string concatenation, or addition of augment or reduplication for verb forms.  These are documented in more detail in the following pages.","category":"page"},{"location":"generating/generating/#Regular-forms:-applying-accent","page":"Generating a form","title":"Regular forms: applying accent","text":"","category":"section"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"The final step is to apply the appropriate accent to the concatenated string.  Accenting Greek words depends on:","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"phonological considerations (such as vowel quantity)\nlexical considerations (such as derivation of verb forms from compounds) \nmorphological considerations (such as the basic principle that finite verb forms have recessive accent, while substantives have persistent accent)","category":"page"},{"location":"generating/generating/","page":"Generating a form","title":"Generating a form","text":"The details of this process are documented in the following pages.","category":"page"},{"location":"lexicon/#Lexicon","page":"Vocabulary items (lexemes)","title":"Lexicon","text":"","category":"section"},{"location":"lexicon/","page":"Vocabulary items (lexemes)","title":"Vocabulary items (lexemes)","text":"Special relationship between database of lexemes and LSJ lexicon:","category":"page"},{"location":"lexicon/","page":"Vocabulary items (lexemes)","title":"Vocabulary items (lexemes)","text":"ids coordinated\nKanones manages two collections: manually confirmed entries, and automatically inferred entries.  See LSJMining.jl.","category":"page"},{"location":"lexicon/","page":"Vocabulary items (lexemes)","title":"Vocabulary items (lexemes)","text":"Free to add other items in their own collection.","category":"page"},{"location":"utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"repo = pwd() |> dirname |> dirname","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"TBA","category":"page"},{"location":"forms/#Morphological-forms","page":"Morphological forms","title":"Morphological forms","text":"","category":"section"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"Kanones has nine types of morphological forms, that are relate to traditional ideas of \"parts of speech.\"  Each type is a subtype of the GreekMorphologicalForm abstraction, and is characterized by a unique set of morphological properties (e.g., nouns are identified by gender, case and number). These properties in turn are subtypes of the GreekMorphologicalProperty abstraction (described in the following section).","category":"page"},{"location":"forms/#Substantives","page":"Morphological forms","title":"Substantives","text":"","category":"section"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"There are three types of substantive form.  They are instantiated from three rule types and three stem types.","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFNoun: has GMPGender, GMPCase, GMPNumber.  Note that gender is inherent (see user's guide on stem records)","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFPronoun: has GMPGender, GMPCase, GMPNumber but in contrast to GMFNoun, gender can vary.","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFAdjective: has GMPGender, GMPCase, GMPNumber and GMPDegree.","category":"page"},{"location":"forms/#Adverbs","page":"Morphological forms","title":"Adverbs","text":"","category":"section"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFAdverb has GMPDegree.  Distinct rule type combined with stems for adjective.","category":"page"},{"location":"forms/#Verbal-forms","page":"Morphological forms","title":"Verbal forms","text":"","category":"section"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"Verb stems combine with distinct rule types for:","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFFiniteVerb: GMPPerson, GMPNumber, GMPTense, GMPMood, GMPVoice","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFInfinitive:  GMPTense, GMPVoice","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFParticiple:  GMPTense, GMPVoice, GMPGender, GMPCase, GMPNumber","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFVerbalAdjecive: GMPGender, GMPCase, GMPNumber; no degree; unlike nouns and pronouns, derived from a verbal stem.","category":"page"},{"location":"forms/#Uninflected-forms","page":"Morphological forms","title":"Uninflected forms","text":"","category":"section"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"GMFUninflected have GMPUninflectedType.  Distinct rule type and stem type.","category":"page"},{"location":"forms/","page":"Morphological forms","title":"Morphological forms","text":"note: CEX collection of all possible forms\nThe kanones github repository includes a delimited-text list of all  forms recognized by Kanones.","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"repo = repo = pwd() |> dirname |> dirname |> dirname","category":"page"},{"location":"bg/analysis/#Kanones'-analyses","page":"Kanones' analyses","title":"Kanones' analyses","text":"","category":"section"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"Kanones.jl implements the model of the CitableParserBuilder module.  Parsing functions (like parsetoken) return a Vector of Analysis objects.  In addition to a lexeme and a form, each Analysis also includes a stem and an inflectional rule. Conceptually, the stem and rule provide the rationale for an analysis: the stem explains why a specific lexeme was chosen, and the inflectional rule explains how the token was formed by applying a particular inflectional pattern to the stem.  When generating tokens, pairing a stem and a rule provides enough information to identify a lexeme and a form and to compose a token.  Kanones can actually produce a full Analysis object when generating tokens as well as when parsing them. ","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"Kanones further associates an implementation of an Orthography with each parser. You can use Kanones to build parsers that are tailored not only to specific features of language (vocabulary or inflectional patterns specific to a particular corpus or dialect), but also to specific orthographic systems and the phonology they represent. The Kanones github repository, for example, includes stems and rules in two completely different orthographies: the standard orthography of printed literary Greek, and the orthography of inscriptions of Athens prior to 403 BCE. ","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"In Kanones, each of the four components of an Analysis are Cite2Urn values. The identifiers for lexemes and morphological forms are potentially applicable to any parser you build with Kanones; stems and rules for the same lexeme and form may differ if you are parsing texts using different orthographies. The fact that you can meaningfully use references to lexems and forms drawn from parsers in different orthographies means that you can even analyze a token in one orthography, and generate the corresponding token for the same lexeme and form in another orthography.","category":"page"},{"location":"bg/analysis/#Example:-transcoding-content","page":"Kanones' analyses","title":"Example: transcoding content","text":"","category":"section"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"First, we build a parser with the conventional orthography of modern printed editions of literary texts.","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"using Kanones, CitableParserBuilder\nusing PolytonicGreek\nlgfiles = joinpath(repo, \"datasets\", \"literarygreek-rules\")\nlg = dataset(lgfiles)\nlgparser = stringParser(lg)","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"Next, we build a parser with an orthography for the Attic alphabet used before 403 BCE.","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"using AtticGreek\natticfiles = joinpath(repo,\"datasets\",\"attic\")\nattic = dataset(atticfiles)\natticparser = stringParser(attic)","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"Now we can analyze a token written in standard orthography.","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"analysis = parsetoken(\"βουλῆς\",lgparser)[1]","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"Kanones has lexeme and formurn functions to retrieve those elements of an analysis.  With those in hand, we can now generate the corresponding token using the parser for Attic orthography.","category":"page"},{"location":"bg/analysis/","page":"Kanones' analyses","title":"Kanones' analyses","text":"vocab = lexeme(analysis)\nform = formurn(analysis)\ngenerate(vocab,form,attic)","category":"page"},{"location":"filesds/#The-FilesDataset","page":"Files dataset","title":"The FilesDataset","text":"","category":"section"},{"location":"filesds/","page":"Files dataset","title":"Files dataset","text":"dataset is an abstraction. Future versions of Kanones may have multiple concrete types. \nright now, the only concrete type is the FilesDataset","category":"page"},{"location":"filesds/","page":"Files dataset","title":"Files dataset","text":"Files dataset:","category":"page"},{"location":"filesds/","page":"Files dataset","title":"Files dataset","text":"specified directory layout\ndelimited text files: no restrictions on naming, number of files, inclusion of blank lines for legibility\nassociated with a specific orthography","category":"page"},{"location":"filesds/","page":"Files dataset","title":"Files dataset","text":"Subsequent pages detail working with files in a FilesDataset.","category":"page"},{"location":"bg/#Background:-analysis-by-synthesis","page":"Analysis by synthesis","title":"Background: analysis by synthesis","text":"","category":"section"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"One possible functional definition of morphological analysis, or parsing, is:","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"note: Morphological analysis (parsing)\nGiven a token (a string value), generate pairings of a vocabulary item (lexeme) and a morphological form.","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"Morphological synthesis is the inverse operation:  ","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"note: Morphological synthesis (generation)\nGiven a lexeme and a form, generate a surface token.","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"It is usually assumed that these two operations are directly reversible: analysis is thought of as \"undoing\" the process of synthesis.  This is literally true when (as is frequently the case) natural language parsers are implemented with finite state transducers.","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"In polytonic Greek, however, the surface token includes movable accents.  The correct orthography of the token results from a complex ineraction of the morphological system, phonological systems, and the accent system.  While this process can be computationally implemented to generate surface tokens, it is not stateless; for this reason, a generating algorithm cannot be simply reversed to analyze a token.  Kanones therefore takes a different approach to morphological analysis: analysis by synthesis.","category":"page"},{"location":"bg/#Kanones'-solution","page":"Analysis by synthesis","title":"Kanones' solution","text":"","category":"section"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"Kanones' solution could be summarized as:","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"Combine stems and endings to generate all forms that can possibly be recognized from a given dataset.\nThe result is a \"parser:\" the set of all possible tokens associated with all possible analyses for that token.\n\"Parsing\" is reduced to looking up a token in the parser's data.","category":"page"},{"location":"bg/","page":"Analysis by synthesis","title":"Analysis by synthesis","text":"In 2022, it is feasible to load the complete set of morphological analyses for all possible tokens in a natural language in memory.  This approach has the simultaneous advantages of minimal technical requirements combined with very high performance, and is easily implemented from plain-text data sources that a classicist can modify or add to.","category":"page"},{"location":"generating/accent/#Accenting-the-final-string","page":"Accenting the final string","title":"Accenting the final string","text":"","category":"section"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"TBA","category":"page"},{"location":"generating/accent/#Nouns","page":"Accenting the final string","title":"Nouns","text":"","category":"section"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"NounStems have an accentpersistence member indicating the type of accent to apply.  ","category":"page"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"note: Controlled vocabulary for accent patterns\nIn the current version of Kanones, accentpersistence is a string value.  It should probably be changed to a better type to control the possible vocabulary.","category":"page"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"Recognized values are:","category":"page"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"recessive\nstemaccented\nobliqueaccented\ninflectionaccented (the default)","category":"page"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"note: TBA: `obliqueaccented` vs. `inflectionaccented`\nExplain difference with examples","category":"page"},{"location":"generating/accent/#Participles-and-infinitives","page":"Accenting the final string","title":"Participles and infinitives","text":"","category":"section"},{"location":"generating/accent/","page":"Accenting the final string","title":"Accenting the final string","text":"Work like other substantives, just using the appropriate stem for the tense/voice.","category":"page"},{"location":"generating/accent/#Finite-verbs","page":"Accenting the final string","title":"Finite verbs","text":"","category":"section"},{"location":"urns/#Identification-with-URNs","page":"Identification with URNs","title":"Identification with URNs","text":"","category":"section"},{"location":"urns/","page":"Identification with URNs","title":"Identification with URNs","text":"URNs used in four elements of analysis are Cite2Urns\nKanones works with abbreviated form\nexpansion of abbreviated form to full URNs is managed throug a URN registry","category":"page"},{"location":"urns/#Managing-a-registry","page":"Identification with URNs","title":"Managing a registry","text":"","category":"section"},{"location":"urns/","page":"Identification with URNs","title":"Identification with URNs","text":"urnregistry folder of your dataset may have up to three subdirectories with names lexemes, rules and stems. (URN namespaces for morphological forms are fixed and not configurable.)","category":"page"},{"location":"urns/","page":"Identification with URNs","title":"Identification with URNs","text":"note: Validating your dataset's configuration\nSee this milestone in GH repo to track progress on Kanones' support for validating the structure and referential integrity of your dataset.","category":"page"},{"location":"morph/#Working-with-morphological-data","page":"Working with morphological data","title":"Working with morphological data","text":"","category":"section"},{"location":"stems/#Stems","page":"Lexical stems","title":"Stems","text":"","category":"section"},{"location":"stems/","page":"Lexical stems","title":"Lexical stems","text":"Stems associate a string and an inflectional class with a lexeme, identified by URN value\nSome types of stem require further information that pertains to the stem (e.g., inherent gender or persistent accent pattern)","category":"page"},{"location":"stems/#Example","page":"Lexical stems","title":"Example","text":"","category":"section"},{"location":"building/buildingds/#Reading-delimited-text-files","page":"Reading delimited files","title":"Reading delimited text files","text":"","category":"section"},{"location":"building/buildingds/#Instantiating-a-dataset","page":"Reading delimited files","title":"Instantiating a dataset","text":"","category":"section"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"root directory\northography","category":"page"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"(See previous pages on the diretory layout of stem and rule types in a FilesDataset.)","category":"page"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"This is enough for the stemsarray and rulesarray functions to collect all stem and rule data from the file system of a FilesDataset.","category":"page"},{"location":"building/buildingds/#Stems-and-Rules","page":"Reading delimited files","title":"Stems and Rules","text":"","category":"section"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"There are five stem types that are subtypes of KanonesStemType.","category":"page"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"There are nine rules types that are subtypes of KanonesRuleType.","category":"page"},{"location":"building/buildingds/","page":"Reading delimited files","title":"Reading delimited files","text":"Each stem type implements the readstemrow function; each rule type implements readrulerow.  These functions read a single delimited-text line and construct a stem or row of their type.","category":"page"},{"location":"apis/apis/#API-documentation","page":"Julia API documentation","title":"API documentation","text":"","category":"section"},{"location":"apis/apis/","page":"Julia API documentation","title":"Julia API documentation","text":"code\nformurn","category":"page"},{"location":"apis/apis/#Kanones.code","page":"Julia API documentation","title":"Kanones.code","text":"Compose a digital code for adj.\n\ncode(verb)\n\n\n\n\n\n\nCompose a digital code string for the form identified in rule.\n\ncode(rule)\n\n\n\n\n\n\nCompose a digital code string for the form identified in verb.\n\ncode(verb)\n\n\n\n\n\n\nCompose a digital code string for the form identified in inf.\n\ncode(p)\n\n\n\n\n\n\nCompose a digital code for inf.\n\ncode(inf)\n\n\n\n\n\n\nCompose digital code for morphological form identified in rule.\n\ncode(rule)\n\n\n\n\n\n\nCompose a digital code string for the form identified in inf.\n\ncode(inf)\n\n\n\n\n\n\nCompose digital code for ptcpl.\n\ncode(ptcpl)\n\n\n\n\n\n\nCompose string of digits for form in rule.\n\ncode(rule)\n\n\n\n\n\n\nCompose a digital code for vadj.\n\ncode(vadj)\n\n\n\n\n\n\nCompose a digital code for noun.\n\ncode(noun)\n\n\n\n\n\n\nCompose a digital code string for the form identified in rule.\n\ncode(rule)\n\n\n\n\n\n\nCompose a digital code string for the form identified in noun.\n\ncode(noun)\n\n\n\n\n\n\nCompose a digital code for adj.\n\ncode(adj)\n\n\n\n\n\n\nCompose digital code for morphological form identified in rule.\n\ncode(rule)\n\n\n\n\n\n\nCompose a digital code string for the form identified in adj.\n\ncode(adj)\n\n\n\n\n\n\nCompose a digital code for adv.\n\ncode(adv)\n\n\n\n\n\n\nCompose a digital code for pronoun.\n\ncode(pronoun)\n\n\n\n\n\n\nCompose a digital code string for the form identified in pns.\n\ncode(pns)\n\n\n\n\n\n\nCompose digital code for uform.\n\ncode(uform)\n\n\n\n\n\n\nCompose a digital code string for the form identified in uninfl.\n\ncode(uninfl)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/apis/#CitableParserBuilder.formurn","page":"Julia API documentation","title":"CitableParserBuilder.formurn","text":"Identify morphlogical form in a.\n\nformurn(a)\n\n\n\n\n\n\nCompose a FormUrn for a GMFFiniteVerb.\n\nformurn(verbform)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a FiniteVerbRule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a IrregularAdjectiveStem.\n\nformurn(verb)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a IrregularAdjectiveStem.\n\nformurn(p)\n\n\n\n\n\n\nCompose a FormUrn for an GMFInfinitive.\n\nformurn(infinitive)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from an InfinitiveRule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a IrregularAdjectiveStem.\n\nformurn(inf)\n\n\n\n\n\n\nCompose a FormUrn for an GMFParticiple.\n\nformurn(ptcpl)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from an InfinitiveRule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose a FormUrn for an GMFVerbalAdjective.\n\nformurn(vadj)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a VerbalAdjectiveRule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose a FormUrn for a GMFNoun.\n\nformurn(noun)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a NounRule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a IrregularNounStem.\n\nformurn(noun)\n\n\n\n\n\n\nCompose a FormUrn for an GMFAdjective.\n\nformurn(adj)\n\n\n\n\n\n\nCompose an abbreviated URN for a morphological form identified in rule.\n\nformurn(rule)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a IrregularAdjectiveStem.\n\nformurn(adj)\n\n\n\n\n\n\nCompose a FormUrn for an GMFAdjective.\n\nformurn(adv)\n\n\n\n\n\n\nCompose a FormUrn for a GMFPronoun.\n\nformurn(pronoun)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a PronounStem.\n\nformurn(pns)\n\n\n\n\n\n\nCompose a FormUrn for an GMFUninflected.\n\nformurn(uninflected)\n\n\n\n\n\n\nCompose an abbreviated URN for a rule from a UninflectedStem.\n\nformurn(uninfl)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/apis/#Parsing","page":"Julia API documentation","title":"Parsing","text":"","category":"section"},{"location":"apis/apis/","page":"Julia API documentation","title":"Julia API documentation","text":"generate\ndecline","category":"page"},{"location":"apis/apis/#Kanones.generate","page":"Julia API documentation","title":"Kanones.generate","text":"Generate a form for a given stem and rule.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate the correct string for lex in the form form.\n\ngenerate(lex, form, ruleset, stemset, orthography)\n\n\n\n\n\n\nGenerate a form for a given lexeme and form within a given dataset.\n\ngenerate(lex, form, kds)\n\n\n\n\n\n\nGenerate a form for a given noun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given adjective stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given noun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given adjective stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given noun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given adjective stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given pronoun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given noun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\nGenerate a form for a given noun stem and rule by combining stem and ending, then adding appropriate accent for this lexical item in this form, and finally stripping off metadata characters marking vowel quantity and morpheme boundaries.\n\ngenerate(stem, rule; ortho)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/apis/#Kanones.decline","page":"Julia API documentation","title":"Kanones.decline","text":"Decline all case-number combinations of lex, a noun.\n\ndecline(lex, kd; withvocative)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#APIs:-morphological-properties-and-forms","page":"Morphological properties and forms","title":"APIs: morphological properties and forms","text":"","category":"section"},{"location":"apis/morph/#Properties","page":"Morphological properties and forms","title":"Properties","text":"","category":"section"},{"location":"apis/morph/","page":"Morphological properties and forms","title":"Morphological properties and forms","text":"Retrieve morphological properties:","category":"page"},{"location":"apis/morph/","page":"Morphological properties and forms","title":"Morphological properties and forms","text":"gmpGender\ngmpCase\ngmpNumber\ngmpPerson\ngmpTense\ngmpMood\ngmpVoice\ngmpDegree\ngmpUninflectedType","category":"page"},{"location":"apis/morph/#Kanones.gmpGender","page":"Morphological properties and forms","title":"Kanones.gmpGender","text":"Extract gender property from a KanonesRule.\n\ngmpGender(stem)\n\n\n\n\n\n\nFind gender of a form.\n\ngmpGender(gmf)\n\n\n\n\n\n\nIdentify gender of ptcpl.\n\ngmpGender(ptcpl)\n\n\n\n\n\n\nExtract gender property from p.\n\ngmpGender(p)\n\n\n\n\n\n\nIdentify gender property of rule.\n\ngmpGender(rule)\n\n\n\n\n\n\nExtract gender property from vadj.\n\ngmpGender(vadj)\n\n\n\n\n\n\nExtract gender from n.\n\ngmpGender(n)\n\n\n\n\n\n\nIdentify gender property for nr.\n\ngmpGender(nr)\n\n\n\n\n\n\nIdentify gender of ns.\n\ngmpGender(ns)\n\n\n\n\n\n\nIdentify gender of noun.\n\ngmpGender(noun)\n\n\n\n\n\n\nExtract gender from adj.\n\ngmpGender(adj)\n\n\n\n\n\n\nIdentify gender for adj.\n\ngmpGender(adj)\n\n\n\n\n\n\nIdentify gender of adj.\n\ngmpGender(adj)\n\n\n\n\n\n\nExtract gender property from p.\n\ngmpGender(p)\n\n\n\n\n\n\nIdentify gender of pr.\n\ngmpGender(pr)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpCase","page":"Morphological properties and forms","title":"Kanones.gmpCase","text":"Extract case property from a KanonesRule.\n\ngmpCase(rule)\n\n\n\n\n\n\nFind case of a form.\n\ngmpCase(gmf)\n\n\n\n\n\n\nIdentify case of ptcpl.\n\ngmpCase(ptcpl)\n\n\n\n\n\n\nExtract case property from p.\n\ngmpCase(p)\n\n\n\n\n\n\nIdentify case property of rule.\n\ngmpCase(rule)\n\n\n\n\n\n\nExtract case property from vadj.\n\ngmpCase(vadj)\n\n\n\n\n\n\nExtract case from n.\n\ngmpCase(n)\n\n\n\n\n\n\nIdentify case property for nr.\n\ngmpCase(nr)\n\n\n\n\n\n\nIdentify case of noun.\n\ngmpCase(noun)\n\n\n\n\n\n\nExtract case from adj.\n\ngmpCase(adj)\n\n\n\n\n\n\nIdentify case for adj.\n\ngmpCase(adj)\n\n\n\n\n\n\nIdentify case of adj.\n\ngmpCase(adj)\n\n\n\n\n\n\nExtract case property from p.\n\ngmpCase(p)\n\n\n\n\n\n\nIdentify case of pr.\n\ngmpCase(pr)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpNumber","page":"Morphological properties and forms","title":"Kanones.gmpNumber","text":"Extract number property from a KanonesRule.\n\ngmpNumber(rule)\n\n\n\n\n\n\nFind number of a form.\n\ngmpNumber(gmf)\n\n\n\n\n\n\nExtract number property from v.\n\ngmpNumber(v)\n\n\n\n\n\n\nFind number property for rule.\n\ngmpNumber(rule)\n\n\n\n\n\n\nIdentify tense of verb.\n\ngmpNumber(verb)\n\n\n\n\n\n\nIdentify number of ptcpl.\n\ngmpNumber(ptcpl)\n\n\n\n\n\n\nExtract tense property from p.\n\ngmpNumber(p)\n\n\n\n\n\n\nIdentify number property of rule.\n\ngmpNumber(rule)\n\n\n\n\n\n\nExtract number property from vadj.\n\ngmpNumber(vadj)\n\n\n\n\n\n\nExtract number from n.\n\ngmpNumber(n)\n\n\n\n\n\n\nIdentify number property for nr.\n\ngmpNumber(nr)\n\n\n\n\n\n\nIdentify number of noun.\n\ngmpNumber(noun)\n\n\n\n\n\n\nExtract number from adj.\n\ngmpNumber(adj)\n\n\n\n\n\n\nIdentify number for adj.\n\ngmpNumber(adj)\n\n\n\n\n\n\nIdentify number of adj.\n\ngmpNumber(adj)\n\n\n\n\n\n\nExtract number property from p.\n\ngmpNumber(p)\n\n\n\n\n\n\nIdentify number of pr.\n\ngmpNumber(pr)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpPerson","page":"Morphological properties and forms","title":"Kanones.gmpPerson","text":"Extract person property from a KanonesRule.\n\ngmpPerson(rule)\n\n\n\n\n\n\nFind person of a form.\n\ngmpPerson(gmf)\n\n\n\n\n\n\nExtract person property from v.\n\ngmpPerson(v)\n\n\n\n\n\n\nFind person property for rule.\n\ngmpPerson(rule)\n\n\n\n\n\n\nIdentify person of verb.\n\ngmpPerson(verb)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpTense","page":"Morphological properties and forms","title":"Kanones.gmpTense","text":"Extract tense property from a KanonesRule.\n\ngmpTense(rule)\n\n\n\n\n\n\nFind tense of a form.\n\ngmpTense(gmf)\n\n\n\n\n\n\nExtract tense property from v.\n\ngmpTense(v)\n\n\n\n\n\n\nFind tense property for rule.\n\ngmpTense(rule)\n\n\n\n\n\n\nIdentify tense of verb.\n\ngmpTense(verb)\n\n\n\n\n\n\nIdentify tense of ptcpl.\n\ngmpTense(ptcpl)\n\n\n\n\n\n\nExtract tense value from inf.\n\ngmpTense(inf)\n\n\n\n\n\n\nFind tense property of inf.\n\ngmpTense(inf)\n\n\n\n\n\n\nIdentify tense of inf.\n\ngmpTense(inf)\n\n\n\n\n\n\nExtract tense property from p.\n\ngmpTense(p)\n\n\n\n\n\n\nIdentify tense property of rule.\n\ngmpTense(rule)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpMood","page":"Morphological properties and forms","title":"Kanones.gmpMood","text":"Extract mood property from a KanonesRule.\n\ngmpMood(rule)\n\n\n\n\n\n\nFind mood of a form.\n\ngmpMood(gmf)\n\n\n\n\n\n\nExtract mood property from v.\n\ngmpMood(v)\n\n\n\n\n\n\nFind mood property for rule.\n\ngmpMood(rule)\n\n\n\n\n\n\nIdentify mood of verb.\n\ngmpMood(verb)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpVoice","page":"Morphological properties and forms","title":"Kanones.gmpVoice","text":"Extract voice property from a KanonesRule.\n\ngmpVoice(rule)\n\n\n\n\n\n\nFind voice of a form.\n\ngmpVoice(gmf)\n\n\n\n\n\n\nExtract voice property from v.\n\ngmpVoice(v)\n\n\n\n\n\n\nFind voice property for rule.\n\ngmpVoice(rule)\n\n\n\n\n\n\nIdentify voice of verb.\n\ngmpVoice(verb)\n\n\n\n\n\n\nIdentify voice of ptcpl.\n\ngmpVoice(ptcpl)\n\n\n\n\n\n\nExtract voice value from inf.\n\ngmpVoice(inf)\n\n\n\n\n\n\nFind voice property of inf.\n\ngmpVoice(inf)\n\n\n\n\n\n\nIdentify voice of inf.\n\ngmpVoice(inf)\n\n\n\n\n\n\nExtract voice property from p.\n\ngmpVoice(p)\n\n\n\n\n\n\nIdentify voice property of rule.\n\ngmpVoice(rule)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpDegree","page":"Morphological properties and forms","title":"Kanones.gmpDegree","text":"Extract degree property from a KanonesRule.\n\ngmpDegree(rule)\n\n\n\n\n\n\nFind degree of a form.\n\ngmpDegree(gmf)\n\n\n\n\n\n\nExtract degree from adj.\n\ngmpDegree(adj)\n\n\n\n\n\n\nIdentify degree for adj.\n\ngmpDegree(adj)\n\n\n\n\n\n\nIdentify degree of adj.\n\ngmpDegree(adj)\n\n\n\n\n\n\nRetrieve degree property of adv.\n\ngmpDegree(adv)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmpUninflectedType","page":"Morphological properties and forms","title":"Kanones.gmpUninflectedType","text":"Find part of speech of an uninflected form.\n\ngmpUninflectedType(gmf)\n\n\n\n\n\n\nExtract \"part of speech\" type from uform.\n\ngmpUninflectedType(uform)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Forms","page":"Morphological properties and forms","title":"Forms","text":"","category":"section"},{"location":"apis/morph/","page":"Morphological properties and forms","title":"Morphological properties and forms","text":"Construct morphological forms:","category":"page"},{"location":"apis/morph/","page":"Morphological properties and forms","title":"Morphological properties and forms","text":"gmfAdjective\ngmfAdverb\ngmfFiniteVerb\ngmfInfinitive\ngmfNoun\ngmfParticiple\ngmfPronoun\ngmfUninflected\ngmfVerbalAdjective","category":"page"},{"location":"apis/morph/#Kanones.gmfAdjective","page":"Morphological properties and forms","title":"Kanones.gmfAdjective","text":"Create an GMFAdjective from a string value.\n\ngmfAdjective(code)\n\n\n\n\n\n\nCreate an GMFAdjective from a CITE2 URN.\n\ngmfAdjective(urn)\n\n\n\n\n\n\nCreate a GMFAdjective from a FormUrn.\n\ngmfAdjective(f)\n\n\n\n\n\n\nCreate a GMFAdjective from an Analysis.\n\ngmfAdjective(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfAdverb","page":"Morphological properties and forms","title":"Kanones.gmfAdverb","text":"Construct a GMFAdverb from a digital code.\n\ngmfAdverb(code)\n\n\n\n\n\n\nConstruct a GMFAdverb from a FormUrn.\n\ngmfAdverb(abbrurn)\n\n\n\n\n\n\nConstruct a GMFAdverb from a Cite2Urn.\n\ngmfAdverb(urn)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfFiniteVerb","page":"Morphological properties and forms","title":"Kanones.gmfFiniteVerb","text":"Create a GMFFiniteVerb from a string value.\n\ngmfFiniteVerb(code)\n\n\n\n\n\n\nCreate a GMFFiniteVerb from a Cite2URN.\n\ngmfFiniteVerb(urn)\n\n\n\n\n\n\nCreate a GMFFiniteVerb from a FormUrn.\n\ngmfFiniteVerb(f)\n\n\n\n\n\n\nCreate a GMFFiniteVerb from an Analysis.\n\ngmfFiniteVerb(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfInfinitive","page":"Morphological properties and forms","title":"Kanones.gmfInfinitive","text":"Create an GMFInfinitive from a string value.\n\ngmfInfinitive(code)\n\n\n\n\n\n\nCreate an GMFInfinitive from a Cite2Urn.\n\ngmfInfinitive(urn)\n\n\n\n\n\n\nCreate an GMFInfinitive from a FormUrn.\n\ngmfInfinitive(f)\n\n\n\n\n\n\nCreate an GMFInfinitive from an Analysis.\n\ngmfInfinitive(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfNoun","page":"Morphological properties and forms","title":"Kanones.gmfNoun","text":"Create a GMFNoun from a string value.\n\ngmfNoun(code)\n\n\n\n\n\n\nCreate a GMFNoun from a Cite2Urn.\n\ngmfNoun(urn)\n\n\n\n\n\n\nCreate a GMFNoun from a FormUrn.\n\ngmfNoun(f)\n\n\n\n\n\n\nCreate a GMFNoun from an Analysis.\n\ngmfNoun(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfParticiple","page":"Morphological properties and forms","title":"Kanones.gmfParticiple","text":"Create a GMFParticiple from a string value.\n\ngmfParticiple(code)\n\n\n\n\n\n\nCreate a GMFParticiple from a Cite2Urn.\n\ngmfParticiple(urn)\n\n\n\n\n\n\nCreate a GMFParticiple from a FormUrn.\n\ngmfParticiple(f)\n\n\n\n\n\n\nCreate a GMFParticiple from an Analysis.\n\ngmfParticiple(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfPronoun","page":"Morphological properties and forms","title":"Kanones.gmfPronoun","text":"Create a GMFPronoun from a string value.\n\ngmfPronoun(code)\n\n\n\n\n\n\nCreate a GMFPronoun from a Cite2Urn.\n\ngmfPronoun(urn)\n\n\n\n\n\n\nCreate a GMFPronoun from a FormUrn.\n\ngmfPronoun(f)\n\n\n\n\n\n\nCreate a GMFPronoun from an Analysis.\n\ngmfPronoun(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfUninflected","page":"Morphological properties and forms","title":"Kanones.gmfUninflected","text":"Create GMFUninflected from a Cite2Urn.\n\ngmfUninflected(urn)\n\n\n\n\n\n\nCreate GMFUninflected from a FormUrn.\n\ngmfUninflected(u)\n\n\n\n\n\n\nCreate GMFUninflected from a string value.\n\ngmfUninflected(codeString)\n\n\n\n\n\n\nCreate GMFUninflected from a Char.\n\ngmfUninflected(ch)\n\n\n\n\n\n\nCreate GMFUninflected from an Int.\n\ngmfUninflected(code)\n\n\n\n\n\n\nCreate GMFUninflected from an Analysis.\n\ngmfUninflected(a)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/morph/#Kanones.gmfVerbalAdjective","page":"Morphological properties and forms","title":"Kanones.gmfVerbalAdjective","text":"Create a GMFVerbalAdjective from a string value.\n\ngmfVerbalAdjective(code)\n\n\n\n\n\n\nCreate a GMFVerbalAdjective from a Cite2Urn.\n\ngmfVerbalAdjective(urn)\n\n\n\n\n\n\nCreate a GMFVerbalAdjective from a FormUrn.\n\ngmfVerbalAdjective(f)\n\n\n\n\n\n\nCreate a GMFVerbalAdjective from an Analysis.\n\ngmfVerbalAdjective(a)\n\n\n\n\n\n\n","category":"function"},{"location":"properties/#Morphological-properties","page":"Morphological properties","title":"Morphological properties","text":"","category":"section"},{"location":"properties/#Overview","page":"Morphological properties","title":"Overview","text":"","category":"section"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Of the four data sets Kanones uses (vocabulary, forms, stems and rules), only one is not editable: forms.  The set of possible forms defines a morphology as \"Greek\".","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Morphological forms (next page) are defined by unique sets of the morphological properties (that is, subtypes of GreekMorphologicalProperty) listed here.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"using Kanones\nperson = GMPPerson(3)","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"All properties work with the label and code functions.`","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"label(person)","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"code(person)","category":"page"},{"location":"properties/#Properties","page":"Morphological properties","title":"Properties","text":"","category":"section"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"The full set of properties is: person, number, tense, mood, voice, gender, case, degree and uninflected part of speech.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Properties may be constructed directly from numeric codes, or from the string value returned by its label function by using an  constructor function with identical name to the type but with initial lowercase gmp.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Person: three values labelled first, second, third.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpPerson(3) == gmpPerson(\"third\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Number: three values labelled singular, dual, plural.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpNumber(3) == gmpNumber(\"plural\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Tense: six values labelled present, imperfect, aorist, perfect, pluperfect and future.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpTense(3) == gmpTense(\"aorist\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Mood: four values labelled indicative, subjunctive, optative, imperative.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpMood(1) == gmpMood(\"indicative\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Voice: three values labelled active, middle, passive.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpVoice(2) == gmpVoice(\"middle\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Gender: three values labelled masculine, feminine, neuter.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpGender(2) == gmpGender(\"feminine\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Case: five values labelled nominative, genitive, dative, accusative, vocative.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpCase(2) == gmpCase(\"genitive\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Degree: three values labelled positive, comparative, superlative.","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpDegree(2) == gmpDegree(\"comparative\")","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"Uninflected part of speech: six values labelled conjunction,     preposition, particle, adverb, numeral, interjection","category":"page"},{"location":"properties/","page":"Morphological properties","title":"Morphological properties","text":"gmpUninflectedType(2) == gmpUninflectedType(\"preposition\")","category":"page"},{"location":"building/profiles/#Profiling-and-validating-data-set","page":"Profliling a data set","title":"Profiling and validating data set","text":"","category":"section"},{"location":"building/profiles/#Examining-a-Kanones-sets","page":"Profliling a data set","title":"Examining a Kanones sets","text":"","category":"section"},{"location":"building/profiles/","page":"Profliling a data set","title":"Profliling a data set","text":"TBA","category":"page"},{"location":"generating/wordformation/#Combining-stem-and-inflection-for-regular-formations","page":"Combining stem and inflection","title":"Combining stem and inflection for regular formations","text":"","category":"section"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"Invidual analytical requirements have specific rquirements for combining stems and inflectional patterns.","category":"page"},{"location":"generating/wordformation/#Substantives","page":"Combining stem and inflection","title":"Substantives","text":"","category":"section"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"For nouns, pronouns and adjectives, just  stemstring(stem) * ending(rule)","category":"page"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"warning: Adverbs\nAdverbs are not yet implemented.","category":"page"},{"location":"generating/wordformation/#Verbs","page":"Combining stem and inflection","title":"Verbs","text":"","category":"section"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"The function regularverbclass is true if it is possible to form all principal parts from a single stem. For these classes, the function principalpart then composes a principal part for a stem + rule combination.  This includes reduplication and augment for tense-mood combinations that require that.","category":"page"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"If the stem is not sufficient for generating a full set of principal parts, then the functions takesreduplication and takesaugment are used to determine whether the string recorded for the stem should be further modified using the reduplicate and augment functions from the PolytonicGreek package.","category":"page"},{"location":"generating/wordformation/","page":"Combining stem and inflection","title":"Combining stem and inflection","text":"At this point, ","category":"page"},{"location":"bg/datasets/#Datasets","page":"Data sets","title":"Datasets","text":"","category":"section"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"For the four collection Kanones needs:","category":"page"},{"location":"bg/datasets/#Forms-collection","page":"Data sets","title":"Forms collection","text":"","category":"section"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"a collection of all possible morphological forms is precompiled as part of the GH repo.  These are the only forms Kanones can work with: you cannot change these.","category":"page"},{"location":"bg/datasets/#Collection-of-lexemes","page":"Data sets","title":"Collection of lexemes","text":"","category":"section"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"a large collection of Greek lexemes is included in two collections: lsjx is a collection of candidate lexemes generated from LSJ articles; lsj is a subset of those that have been verified to be a lexeme.","category":"page"},{"location":"bg/datasets/#Inflectional-rules","page":"Data sets","title":"Inflectional rules","text":"","category":"section"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"for standard literary Greek, datasets/literarygreek-rules should be all you need for Attic.  You can add to these if you want to e.g. expand coverage of literary dialects. Best practice: maintain additions in separate files, and please submit pull request to add them to Kanones' gh repo!\nfor Attic alphabet pre 403 BCE, sample rules in datasets/attic.","category":"page"},{"location":"bg/datasets/#Stems","page":"Data sets","title":"Stems","text":"","category":"section"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"In practice, this is the dataset you're most likely to edit.","category":"page"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"Identifying lexemes:","category":"page"},{"location":"bg/datasets/","page":"Data sets","title":"Data sets","text":"check LSJ from folio2.furman.edu; use its ID value if you find your item. Otherwise, register your own namespace, create a new id in that namespace\nuse separate files to group things easily.  Eg., proper names in a particular text or corpus that do not appear in LSJ","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"repo = pwd() |> dirname |> dirname ","category":"page"},{"location":"#Kanones","page":"The Kanones system for building morphological parsers","title":"Kanones","text":"","category":"section"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"☛ Build customized morphological parsers for ancient Greek","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"all data managed in delimited-text tables you can modify or add to with any text editor\nrigorously defined orthography.  Example parsers include standard orthography of printed editions of literary Greek, and a parser for epigraphic Greek in the alphabet used by Athens before 403 BCE.\nimplemented entirely in the Julia language (no other technical prerequisites): \nplatform independent\nfast:  a parser built with Kanones on consumer-grade hardware can typically parse a token in 1-9 milliseconds.\ncode library can be used from command line, in scripts, in web apps, directly in an editor like Visual Studio Code","category":"page"},{"location":"#Quick-example","page":"The Kanones system for building morphological parsers","title":"Quick example","text":"","category":"section"},{"location":"#Building-a-parser","page":"The Kanones system for building morphological parsers","title":"Building a parser","text":"","category":"section"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Load a dataset, and build a parser from it.  All the examples in this documentation use the literarygreek-rules dataset found in the datasets directory of the Kanones github repository.","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"using Kanones, CitableParserBuilder\nsrcdir = joinpath(repo, \"datasets\", \"literarygreek-rules\") \nkds = dataset([srcdir])\np = stringParser(kds)\np isa StringParser","category":"page"},{"location":"#Interactive-parsing","page":"The Kanones system for building morphological parsers","title":"Interactive parsing","text":"","category":"section"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Parse a string: in this case, there is only one result.","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"s = \"ἀνθρώπῳ\"\nparses = parsetoken(s, p)","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Extract a GreekMorphologicalForm from each analysis, and apply the label function to each:","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"parses .|> greekForm .|> label","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Extract URNs for the lexeme from each analysis:","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"lexemelist = parses .|> lexemeurn","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"After downloading LSJ labels for lexemes in the lsj collection, label lexemes with LSJ labels included.","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"lsj = lemmatadict()\nlemmalabel(lexemelist[1], dict = lsj)","category":"page"},{"location":"#What-sections-of-these-pages-to-read","page":"The Kanones system for building morphological parsers","title":"What sections of these pages to read","text":"","category":"section"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Practical information:","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"build a parser from an existing dataset and parse forms interactively: this page\nunderstand what Kanones is about: Background\nmanage or modify a Kanones dataset, and build a new parser: User's guide to Kanones data\nuse Kanones analyses in Julia code: Using morphological objects in Julia","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Details of implementation:","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"see how Kanones builds a dataset from files: Implementation: building a dataset\nsee how Kanones generates form: Implementation: generating forms","category":"page"},{"location":"","page":"The Kanones system for building morphological parsers","title":"The Kanones system for building morphological parsers","text":"Reference documentation: API docs","category":"page"},{"location":"rules/#Inflectional-rules","page":"Inflectional rules","title":"Inflectional rules","text":"","category":"section"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"associate an ending and an inflectional class with a morphological form\nin managing rules from delimited-text files, different types of morphological forms are represented by appropriate property values\nrules can be read from delimited-text source with readrulerow","category":"page"},{"location":"rules/#Example","page":"Inflectional rules","title":"Example","text":"","category":"section"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"Read a rule from delimited text:","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"using Kanones\ndelimited = \"adjinfl.osaon1|os_a_on|ος|masculine|nominative|singular|positive|\"\nadjio = Kanones.AdjectiveIO(\"adjectives\")\nrule = Kanones.readrulerow(adjio, delimited)","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"Find its RuleUrn:","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"ruleurn(rule)","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"Find its inflectional type and inflectional ending:","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"inflectionclass(rule)","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"ending(rule)","category":"page"},{"location":"rules/#morphological-data","page":"Inflectional rules","title":"morphological data","text":"","category":"section"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"formabbr = formurn(rule) expectedabbr = FormUrn(\"forms.7010001110\") @test formabbr == expectedabbr","category":"page"},{"location":"rules/","page":"Inflectional rules","title":"Inflectional rules","text":"formcode = code(rule) expectedcode = \"7010001110\" @test formcode == expectedcode","category":"page"}]
}
